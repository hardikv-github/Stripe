using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using Microsoft.Xrm.Sdk.Query;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Threading;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Net;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Json;
using System.Globalization;
using StripeIntegration.Plugins.Model;
using StripeIntegration.Plugins.StripeModel;
using Stripe;

namespace StripeIntegration.Plugins
{
    public class CreateChargeUsingTokenActionPlugin : IPlugin
    {
        private readonly string _unsecureString;
        private readonly string _secureString;
        public CreateChargeUsingTokenActionPlugin(string unsecureString, string secureString)
        {
            _unsecureString = unsecureString;
            _secureString = secureString;
        }

        public void Execute(IServiceProvider serviceProvider)
        {
            ITracingService Tracer = (ITracingService)serviceProvider.GetService(typeof(ITracingService));
            IPluginExecutionContext context = (IPluginExecutionContext)serviceProvider.GetService(typeof(IPluginExecutionContext));
            IOrganizationServiceFactory factory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));
            IOrganizationService Service = factory.CreateOrganizationService(context.UserId);
            OrganizationServiceContext orgContext = new OrganizationServiceContext(Service);
            
            Tracer.Trace($"START");
            StripeResponseModel resModel = new StripeResponseModel();
            try
            {
                string tokenVal = context.InputParameters["Token"].ToString();
                Tracer.Trace($"tokenVal: {tokenVal}");
                string amountVal = context.InputParameters["Amount"].ToString();
                Tracer.Trace($"amountVal: {amountVal}");
                string descriptionVal = context.InputParameters["Description"].ToString();
                Tracer.Trace($"descriptionVal: {descriptionVal}");
                string currencyVal = context.InputParameters["CurrencyCode"].ToString();
                Tracer.Trace($"currencyVal: {currencyVal}");

                resModel = CreateChargeInStripe(tokenVal, long.Parse(amountVal), descriptionVal, currencyVal);

                string resJson = JsonHelper.JsonSerializer<StripeResponseModel>(resModel);
                context.OutputParameters["Result"] = resJson;
            }
            catch (Exception ex)
            {
                resModel.IsSuccess = false;
                resModel.Message = "Error: " + ex.Message;

                string resJson = JsonHelper.JsonSerializer<StripeResponseModel>(resModel);
                context.OutputParameters["Result"] = resJson;
            }
        }

        public StripeResponseModel CreateChargeInStripe(string tokenVal, long amountVal, string descriptionVal, string currencyVal)
        {
            StripeResponseModel stripeResponseModel = new StripeResponseModel();
            stripeResponseModel.IsSuccess = true;
            stripeResponseModel.Message = "Success";

            StripeConfiguration.ApiKey = "sk_test_51OAXoaJOq4EY9FmsUTdLyrEE50N"; // Replace with your Stripe secret key
            //StripeConfiguration.ApiKey = getApiKey(); // Replace with your Stripe secret key

            try
            {
                var options = new ChargeCreateOptions
                {
                    Amount = amountVal, // Amount in cents (500 AUD)
                    Currency = currencyVal,
                    Description = descriptionVal,
                    Source = tokenVal // Token generated by Stripe.js on the client side
                };

                var service = new ChargeService();
                Charge charge = service.Create(options);

                if (charge.Paid)
                {
                    stripeResponseModel.IsSuccess = true;
                    stripeResponseModel.Message = charge.Status;
                }
            }
            catch (Exception ex)
            {
                stripeResponseModel.IsSuccess = false;
                stripeResponseModel.Message = ex.Message;
                throw;
            }

            return stripeResponseModel;
        }

        public string getApiKey()
        {
            if (!String.IsNullOrWhiteSpace(_unsecureString))
            {
                PluginConfiguration pluginConfiguration = JsonHelper.JsonDeserialize<PluginConfiguration>(_unsecureString);
                if (pluginConfiguration != null && pluginConfiguration.ApiKey != string.Empty)
                    return pluginConfiguration.ApiKey;
                else
                    throw new InvalidPluginExecutionException("ApiKey is required for this plugin to execute.");
            }
            else
                throw new InvalidPluginExecutionException("Configuration string is required for this plugin to execute.");
        }

    }

    [DataContract]
    public class EnrolleeData
    {
        [DataMember]
        public string EnrolleeFullname { get; set; }
        [DataMember]
        public string EnrolleeEmailAddress { get; set; }
    }



}